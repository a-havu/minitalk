ALLOWED FUNCTIONS

write, ft_printf, malloc, free, exit

◦ signal

	avoid! the behavior varies across UNIX versions -> use sigaction instead
	signal sets the disposition of the signal _signum_ to _handler_

◦ sigemptyset

	#include <signal.h>
    int sigemptyset(sigset_t *set);

	allows the manipulation of POSIX signal sets.
	initializes the signal set given by _set_ to empty, with all signals excluded from the set.
	returns 0 on success and -1 on error

◦ sigaddset

	#include <signal.h>
	int sigaddset(sigset_t *set, int signum);

	allows the manipulation of POSIX signal sets.
	adds the signal _signum_ to _set_
	returns 0 on success and -1 on error

◦ sigaction

	#include <signal.h>
	int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);

	system call, used to change the action taken by a process on receipt of a specific signal.
	/ allows the calling process to examine and/or specify the action to be associated with a specific signal. 
	If _act_ is non-NULL, the new action for signal  _signum_  is  installed  from  _act_.   If
    _oldact_ is non-NULL, the previous action is saved in _oldact_.

	struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };
		   
◦ kill
 
	kill [options] <pid> [...]

	send signals to running processes.
	By default, it sends the termination signal (SIGTERM), which requests that the process exit gracefully.
	
	kill -9 -1
        -> Kill all processes you can kill.

	kill 4242
		-> kill a process with PID 4242
	--signal <signal>
              Specify the signal to be sent.  The signal can be specified by using name or number.

◦ getpid

	#include <unistd.h>
    pid_t getpid(void);

	returns the process ID (PID) of the calling process - no errors!

◦ pause

	#include <unistd.h>
	int pause(void);

	causes the calling process to sleep until a signal is delivered that either terminates the process
	or causes the invocation of signal-catching function

	pause() returns only when a signal was caught and the signal-catching function returned.  In this case,  pause()  returns
    -1, and errno is set to EINTR. (Interrupted system call)

◦ sleep

	sleep NUMBER[SUFFIX]...
    sleep OPTION

	delay/pause for NUMBER seconds. 
	SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours or 'd' for days.
	NUMBER doesn't have to be an integer

◦ usleep

	#include <unistd.h>
	int usleep(useconds_t usec);

	suspends  execution  of  the  calling thread for (at least) usec microseconds.
	The sleep may be lengthened slightly by any system activity
	or by the time spent processing the call
	or  by  the  granularity  of  system timers.
	The  type  useconds_t is an unsigned integer type
	capable of holding integers in the range [0,1000000].

